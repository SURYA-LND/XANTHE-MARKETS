import React, { useState, FormEvent, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowUp, Plus, Bot, User } from 'lucide-react';
import { ChatMessage } from './ChatMessage';

interface Message {
  id: number;
  text: string;
  sender: 'user' | 'ai';
}

export const Chat: React.FC = () => {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    { id: 1, text: "Hello! I'm MarketPulse AI. How can I help you set up your financial news feed today?", sender: 'ai' }
  ]);
  const [isProcessing, setIsProcessing] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messages]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isProcessing) return;

    const userMessage: Message = { id: Date.now(), text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsProcessing(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: Date.now() + 1,
        text: "Excellent! I've set up a daily digest for tech stocks and crypto news. To complete the setup and start receiving emails, please subscribe to our lifetime plan.",
        sender: 'ai'
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsProcessing(false);
    }, 1500);
  };

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.6, ease: 'easeOut' } }}
      className="w-full max-w-3xl mx-auto"
    >
      <div className="relative bg-brand-gray/50 border border-brand-gray-dark rounded-xl shadow-lg backdrop-blur-sm overflow-hidden">
        <div className="h-64 overflow-y-auto p-4 space-y-4">
          <AnimatePresence initial={false}>
            {messages.map((msg) => (
              <motion.div
                key={msg.id}
                layout
                initial={{ opacity: 0, scale: 0.8, y: 50 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.8, y: -50 }}
                transition={{ duration: 0.4, ease: 'easeOut' }}
              >
                <ChatMessage sender={msg.sender} text={msg.text} />
              </motion.div>
            ))}
            {isProcessing && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <ChatMessage sender="ai" text="..." isLoading={true} />
              </motion.div>
            )}
          </AnimatePresence>
          <div ref={messagesEndRef} />
        </div>
        <form onSubmit={handleSubmit} className="p-2 border-t border-brand-gray-dark">
          <div className="relative">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className="w-full bg-transparent text-white placeholder-brand-gray-light focus:outline-none p-4 pr-24 text-base"
              placeholder="e.g., 'Daily tech stocks & crypto news...'"
              disabled={isProcessing}
            />
            <div className="absolute top-1/2 -translate-y-1/2 right-2 flex items-center space-x-2">
              <button type="button" className="h-10 w-10 bg-gray-600/50 hover:bg-gray-500/50 rounded-full flex items-center justify-center transition-colors" disabled={isProcessing}>
                <Plus className="text-white" size={20} />
              </button>
              <button type="submit" className="h-10 w-10 bg-brand-blue hover:bg-blue-600 rounded-full flex items-center justify-center transition-colors disabled:bg-brand-gray-dark" disabled={isProcessing || !input.trim()}>
                <ArrowUp className="text-white" size={20} />
              </button>
            </div>
          </div>
        </form>
      </div>
    </motion.div>
  );
};
